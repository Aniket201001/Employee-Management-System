package com.example.demo.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.model.Employee;
import com.example.demo.repository.EmployeeRepository;

@Service
public class EmployeeService {
    
    @Autowired
    private EmployeeRepository employeeRepository;
    

    public AddEmployeeResult addEmployee(Employee employee) {
        if (employeeRepository.existsByName(employee.getName())){
            return new AddEmployeeResult(null,false, "Employee with the same name already exists");
        }else if(employeeRepository.existsByEmail(employee.getEmail())) {
        	return new AddEmployeeResult(null,false, "Employee with the email already exists");
        }else {

        employeeRepository.save(employee);
        return new AddEmployeeResult(employee,true, "Employee added successfully");
    }
    }

    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    public Employee getEmployeeById(Long id) {
        return employeeRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Employee not found with id: " + id));
    }

    public UpdateEmployeeResult updateEmployee(Long id, Employee employeeDetails) {
        Employee existingEmployee = employeeRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Employee not found with id: " + id));

        // Check if the new name or email already exists
        Employee existingWithName = employeeRepository.findByName(employeeDetails.getName());
        Employee existingWithEmail = employeeRepository.findByEmail(employeeDetails.getEmail());
        if (existingWithName != null && !existingWithName.getId().equals(id)) {
            return new UpdateEmployeeResult(false, "Employee with the same name already exists.");
        }
        if (existingWithEmail != null && !existingWithEmail.getId().equals(id)) {
            return new UpdateEmployeeResult(false, "Employee with the same email already exists.");
        }

        // Update employee details
        existingEmployee.setName(employeeDetails.getName());
        existingEmployee.setEmail(employeeDetails.getEmail());

        Employee updatedEmployee = employeeRepository.save(existingEmployee);
        return new UpdateEmployeeResult(true, "Employee updated successfully.", updatedEmployee);
    }

    public void deleteEmployee(Long id) {
        Employee employee = employeeRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Employee not found with id: " + id));
        
        employeeRepository.delete(employee);
    }
}
